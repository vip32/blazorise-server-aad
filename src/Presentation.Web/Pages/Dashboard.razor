@inject AuthenticationStateProvider AuthenticationStateProvider
@page "/"
@attribute [Authorize(Roles = "Administrator, Editor")]

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.FromBottom">Blazorise</Heading>

<Paragraph>
    Blazorise is a component library built on top of Blazor and CSS frameworks like <Blazorise.Link To="https://getbootstrap.com/" Target="Target.Blank">Bootstrap</Blazorise.Link>, <Blazorise.Link To="https://bulma.io/" Target="Target.Blank">Bulma</Blazorise.Link>, <Blazorise.Link To="https://ant.design/" Target="Target.Blank">Ant Design</Blazorise.Link>, <Blazorise.Link To="https://efraa.github.io/eFrolic/" Target="Target.Blank">eFrolic</Blazorise.Link> and <Blazorise.Link To="http://daemonite.github.io/material/" Target="Target.Blank">Material</Blazorise.Link>. It can be used to build responsive, single-page web applications.
</Paragraph>

<Alert Color="Color.Info" Visible="true">
    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
        Note:
    </Heading>
    <Paragraph>
        This is a demo application for Blazorise used to show basic example for most of the components and extensions.
    </Paragraph>
    <Paragraph>
        Full source code for this demo can be found on <Blazorise.Link To="https://github.com/stsrki/Blazorise/tree/master/Demos/Blazorise.Demo" Target="Target.Blank">GitHub</Blazorise.Link>.
    </Paragraph>
    <Paragraph>
        If you wish to learn more about Blazorise please go to the official <Blazorise.Link To="https://blazorise.com/docs/" Target="Target.Blank">documentation</Blazorise.Link>.
    </Paragraph>
</Alert>

<Paragraph>
    On the left sidebar you can see the Blazorise components and extensions in action.
</Paragraph>
<br />
<Paragraph>
    <strong> Demo application for</strong>: Blazorise @($"v{typeof( Blazorise.BaseComponent ).Assembly.GetName().Version.ToString( 3 )}")
</Paragraph>

<AuthorizeView> @*https://docs.microsoft.com/en-us/aspnet/core/blazor/security/?view=aspnetcore-3.1#authorization*@
    <Authorized>
        Hello, @context.User.Identity.Name!
        <a href="MicrosoftIdentity/Account/SignOut">Log out</a>
    </Authorized>
    <NotAuthorized>
        <a href="MicrosoftIdentity/Account/SignIn">Log in</a>
    </NotAuthorized>
</AuthorizeView>

<p>@_authMessage [role: @_role]</p>

<AuthorizeView Roles="Administrator">
    <p>You can only see this if you're an administrator.</p>
</AuthorizeView>
<AuthorizeView Roles="Editor">
    <p>You can only see this if you're an editor.</p>
</AuthorizeView>

@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

@code {
    private string _role;
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";

            if (user.IsInRole("Administrator"))
            {
                _role = "Administrator";
            }
            if (user.IsInRole("Editor"))
            {
                _role = "Editor";
            }
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
}